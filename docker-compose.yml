services:
  nginx:
    build: .
    ports:
      - "443:443"
      - "444:444"
    depends_on:
      backend:
        condition: service_started
      frontend:
        condition: service_started
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf:ro"

  frontend:
    build:
      context: ./yew-front
      dockerfile: Dockerfile
    depends_on:
      backend:
        condition: service_started
    entrypoint: [ "trunk", "serve", "--proxy-backend=http://backend:5000/api" ]

  backend:
    build:
      context: ./backend
      dockerfile: ./Events.Api/Dockerfile
    depends_on:
      # rabbitmq:
        # condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - "ASPNETCORE_URLS=http://+:5000"
      - "ConnectionStrings:RabbitMQ=rabbitmq"
      - "ConnectionStrings:Postgres2db=Host=postgres; Database=linq2db; Username=postgres; Password=password"

  # statistics:
  #   build:
  #     context: ./statistics
  #     dockerfile: Dockerfile
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #   environment:
  #     AMQP_ADDR: "amqp://rabbitmq:5672/%2f"

  # rabbitmq:
  #   image: rabbitmq:3-management
  #   healthcheck:
  #     test: rabbitmq-diagnostics -q ping
  #     interval: 10s
  #     timeout: 10s
  #     retries: 5
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"

  postgres:
    image: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      PGDATA: /var/lib/postgresql/data/
      POSTGRES_DB: linq2db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

volumes:
  db_data:
